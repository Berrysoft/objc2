use std::collections::BTreeMap;
use std::fmt;
use std::fs;
use std::io;
use std::path::Path;

use crate::config::LibraryData;
use crate::file::File;

#[derive(Debug, PartialEq, Default)]
pub struct Library {
    pub files: BTreeMap<String, File>,
    link_name: String,
    data: LibraryData,
}

impl Library {
    pub fn new(name: &str, data: &LibraryData) -> Self {
        Self {
            files: BTreeMap::new(),
            link_name: name.to_string(),
            data: data.clone(),
        }
    }

    pub fn output(&self, path: &Path) -> io::Result<()> {
        for (name, file) in &self.files {
            // NOTE: some SDK files have '+' in the file name
            let name = name.replace('+', "_");
            let mut path = path.join(name);
            path.set_extension("rs");
            fs::write(&path, file.to_string())?;
        }

        // truncate if the file exists
        fs::write(path.join("mod.rs"), self.to_string())?;

        Ok(())
    }

    pub fn compare(&self, other: &Self) {
        super::compare_btree(&self.files, &other.files, |name, self_file, other_file| {
            let _span = debug_span!("file", name).entered();
            self_file.compare(other_file);
        });
    }
}

impl fmt::Display for Library {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        writeln!(
            f,
            "// This file has been automatically generated by `objc2`'s `header-translator`."
        )?;
        writeln!(f, "// DO NOT EDIT")?;
        writeln!(f)?;
        writeln!(f, "//! # Bindings to the `{}` framework", self.link_name)?;

        // Lints
        // We emit `use [framework]::*` more than necessary often.
        writeln!(f, "#![allow(unused_imports)]")?;
        // Deprecated items are often still used in other signatures.
        writeln!(f, "#![allow(deprecated)]")?;
        // Methods use a different naming scheme.
        writeln!(f, "#![allow(non_snake_case)]")?;
        // We emit C types with a different naming scheme.
        writeln!(f, "#![allow(non_camel_case_types)]")?;
        // Statics and enum fields use a different naming scheme.
        writeln!(f, "#![allow(non_upper_case_globals)]")?;
        // We don't yet emit documentation for methods.
        writeln!(f, "#![allow(missing_docs)]")?;

        // Clippy lints
        // We have no control over how many arguments a method takes.
        writeln!(f, "#![allow(clippy::too_many_arguments)]")?;
        // We have no control over how complex a type is.
        writeln!(f, "#![allow(clippy::type_complexity)]")?;
        // Apple's naming scheme allows this.
        writeln!(f, "#![allow(clippy::upper_case_acronyms)]")?;
        // Headers often use `x << 0` for clarity.
        writeln!(f, "#![allow(clippy::identity_op)]")?;
        // We don't have the manpower to document the safety of methods.
        writeln!(f, "#![allow(clippy::missing_safety_doc)]")?;

        writeln!(f)?;

        // Link to the correct framework.
        if self.data.cfg_apple_link {
            // Allow a different linking on GNUStep
            writeln!(
                f,
                "#[cfg_attr(feature = \"apple\", link(name = \"{}\", kind = \"framework\"))]",
                self.link_name
            )?;
        } else {
            writeln!(
                f,
                "#[link(name = \"{}\", kind = \"framework\")]",
                self.link_name
            )?;
        }
        writeln!(f, "extern \"C\" {{}}")?;
        writeln!(f)?;

        for name in self.files.keys() {
            // NOTE: some SDK files have '+' in the file name
            let name = name.replace('+', "_");
            writeln!(f, "#[path = \"{name}.rs\"]")?;
            writeln!(f, "mod __{name};")?;
        }

        writeln!(f)?;

        for (file_name, file) in &self.files {
            // NOTE: some SDK files have '+' in the file name
            let file_name = file_name.replace('+', "_");
            for stmt in &file.stmts {
                let features = stmt.features();

                if let Some(name) = stmt.name() {
                    write!(f, "{}", features.cfg_gate_ln())?;

                    let visibility = if name.starts_with('_') {
                        "pub(crate)"
                    } else {
                        "pub"
                    };

                    write!(f, "{visibility} use self::__{file_name}::{{{name}}};")?;
                }
            }
        }

        Ok(())
    }
}
