use std::collections::BTreeSet;
use std::fmt;

use crate::display_helper::FormatterFn;
use crate::stmt::Stmt;
use crate::Config;

#[derive(Debug, PartialEq)]
pub struct File {
    library_name: String,
    pub(crate) stmts: Vec<Stmt>,
}

/// Some SDK files have '+' in the file name, so we change those to `_`.
pub(crate) fn clean_name(name: &str) -> String {
    name.replace('+', "_")
}

impl File {
    pub fn new(library_name: &str) -> Self {
        Self {
            library_name: library_name.to_string(),
            stmts: Vec::new(),
        }
    }

    pub fn add_stmt(&mut self, stmt: Stmt) {
        self.stmts.push(stmt);
    }

    pub fn crates<'c>(&self, config: &'c Config) -> BTreeSet<&'c str> {
        self.stmts
            .iter()
            .flat_map(|stmt| stmt.required_items_inner())
            .filter(|item| item.location().library != self.library_name)
            // Ignore crate imports for required items from unknown crates
            .filter_map(|item| item.location().krate(config))
            .collect()
    }

    pub fn required_cargo_features(&self, config: &Config) -> BTreeSet<String> {
        let mut required_features = BTreeSet::new();
        for stmt in &self.stmts {
            for required_item in stmt.required_items_inner() {
                let location = required_item.location();
                if let Some(feature) = location.cargo_toml_feature(config, &self.library_name) {
                    required_features.insert(feature);
                }
            }
        }

        required_features
    }

    pub fn contents<'a>(&'a self, config: &'a Config) -> impl fmt::Display + 'a {
        FormatterFn(move |f| {
            writeln!(
                f,
                "//! This file has been automatically generated by `objc2`'s `header-translator`."
            )?;
            writeln!(f, "//! DO NOT EDIT")?;

            writeln!(f, "use objc2::__framework_prelude::*;")?;

            let mut crates = self.crates(config);
            // TODO: Remove this once MainThreadMarker is moved to objc2
            crates.extend(
                config.libraries[&self.library_name]
                    .required_dependencies
                    .iter()
                    .map(|krate| &**krate),
            );

            for krate in crates {
                let required = config.libraries[&self.library_name]
                    .required_dependencies
                    .contains(krate);
                if !required {
                    writeln!(f, "#[cfg(feature = {:?})]", krate)?;
                }
                writeln!(f, "use {}::*;", krate.replace('-', "_"))?;
            }
            writeln!(f)?;
            writeln!(f, "use crate::*;")?;

            writeln!(f)?;

            for stmt in &self.stmts {
                writeln!(f, "{}", stmt.fmt(config))?;
            }

            Ok(())
        })
    }
}
